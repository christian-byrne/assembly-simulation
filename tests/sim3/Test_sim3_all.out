
--------------------------------
MUX_8by1 test

FORMAT:			[ INPUT | CONTROL ] = OUTPUT

ENCODED INSTRUCTION:	[ 00000001 | 000 ] = 1
READABLE INSTRUCTION:	[ 00000001 | AND ] = 1
--------------------------------


--------------------------------
MUX_8by1 test

FORMAT:			[ INPUT | CONTROL ] = OUTPUT

ENCODED INSTRUCTION:	[ 00000010 | 001 ] = 1
READABLE INSTRUCTION:	[ 00000010 | OR ] = 1
--------------------------------


--------------------------------
MUX_8by1 test

FORMAT:			[ INPUT | CONTROL ] = OUTPUT

ENCODED INSTRUCTION:	[ 00000100 | 010 ] = 1
READABLE INSTRUCTION:	[ 00000100 | ADD ] = 1
--------------------------------


--------------------------------
MUX_8by1 test

FORMAT:			[ INPUT | CONTROL ] = OUTPUT

ENCODED INSTRUCTION:	[ 00001000 | 011 ] = 1
READABLE INSTRUCTION:	[ 00001000 | LESS ] = 1
--------------------------------


--------------------------------
MUX_8by1 test

FORMAT:			[ INPUT | CONTROL ] = OUTPUT

ENCODED INSTRUCTION:	[ 00010000 | 100 ] = 1
READABLE INSTRUCTION:	[ 00010000 | XOR ] = 1
--------------------------------


--------------------------------
MUX_8by1 test

FORMAT:			[ INPUT | CONTROL ] = OUTPUT

ENCODED INSTRUCTION:	[ 11111110 | 000 ] = 0
READABLE INSTRUCTION:	[ 11111110 | AND ] = 0
--------------------------------


--------------------------------
MUX_8by1 test

FORMAT:			[ INPUT | CONTROL ] = OUTPUT

ENCODED INSTRUCTION:	[ 11111101 | 001 ] = 0
READABLE INSTRUCTION:	[ 11111101 | OR ] = 0
--------------------------------


--------------------------------
MUX_8by1 test

FORMAT:			[ INPUT | CONTROL ] = OUTPUT

ENCODED INSTRUCTION:	[ 11111011 | 010 ] = 0
READABLE INSTRUCTION:	[ 11111011 | ADD ] = 0
--------------------------------


--------------------------------
MUX_8by1 test

FORMAT:			[ INPUT | CONTROL ] = OUTPUT

ENCODED INSTRUCTION:	[ 11110111 | 011 ] = 0
READABLE INSTRUCTION:	[ 11110111 | LESS ] = 0
--------------------------------


--------------------------------
MUX_8by1 test

FORMAT:			[ INPUT | CONTROL ] = OUTPUT

ENCODED INSTRUCTION:	[ 11101111 | 100 ] = 0
READABLE INSTRUCTION:	[ 11101111 | XOR ] = 0
--------------------------------


--------------------------------
ALUElement test (basic operations)

FORMAT:			OPCODE	a ? b = result		carryIn	carryOut	addResult	less

ENCODED INSTRUCTION:	000	1 & 1 = 1		0	1		0		0
READABLE INSTRUCTION:	AND	1 & 1 = 1		0	1		0		0

ENCODED INSTRUCTION:	001	1 | 1 = 1		0	1		0		0
READABLE INSTRUCTION:	OR	1 | 1 = 1		0	1		0		0

ENCODED INSTRUCTION:	010	1 + 1 = 0		0	1		0		0
READABLE INSTRUCTION:	ADD	1 + 1 = 0		0	1		0		0

ENCODED INSTRUCTION:	011	1 < 1 = 0		0	1		0		0
READABLE INSTRUCTION:	LESS	1 < 1 = 0		0	1		0		0

ENCODED INSTRUCTION:	100	1 ^ 1 = 0		0	1		0		0
READABLE INSTRUCTION:	XOR	1 ^ 1 = 0		0	1		0		0

--------------------------------

--------------------------------
ALUElement test (add operations)

FORMAT:			OPCODE	a ? b = result		carryIn	carryOut	addResult	less

ENCODED INSTRUCTION:	010	0 + 0 = 0		0	0		0		0
READABLE INSTRUCTION:	ADD	0 + 0 = 0		0	0		0		0

ENCODED INSTRUCTION:	010	1 + 0 = 1		0	0		1		0
READABLE INSTRUCTION:	ADD	1 + 0 = 1		0	0		1		0

ENCODED INSTRUCTION:	010	0 + 1 = 1		0	0		1		0
READABLE INSTRUCTION:	ADD	0 + 1 = 1		0	0		1		0

ENCODED INSTRUCTION:	010	1 + 1 = 0		0	1		0		0
READABLE INSTRUCTION:	ADD	1 + 1 = 0		0	1		0		0

--------------------------------

--------------------------------
ALUElement test (mixed operations)

FORMAT:			OPCODE	a ? b = result		carryIn	carryOut	addResult	less

ENCODED INSTRUCTION:	001	0 | 0 = 0		0	0		0		0
READABLE INSTRUCTION:	OR	0 | 0 = 0		0	0		0		0

ENCODED INSTRUCTION:	100	1 ^ 0 = 1		0	0		1		0
READABLE INSTRUCTION:	XOR	1 ^ 0 = 1		0	0		1		0

ENCODED INSTRUCTION:	010	1 + 0 = 1		1	1		1		0
READABLE INSTRUCTION:	ADD	1 + 0 = 1		1	1		1		0

ENCODED INSTRUCTION:	010	1 + 1 = 0		1	1		0		0
READABLE INSTRUCTION:	ADD	1 + 1 = 0		1	1		0		0

ENCODED INSTRUCTION:	010	0 + 1 = 1		1	0		1		0
READABLE INSTRUCTION:	ADD	0 + 1 = 1		1	0		1		0

ENCODED INSTRUCTION:	000	0 & 1 = 0		0	0		1		0
READABLE INSTRUCTION:	AND	0 & 1 = 0		0	0		1		0

ENCODED INSTRUCTION:	011	0 < 1 = 1		0	0		1		1
READABLE INSTRUCTION:	LESS	0 < 1 = 1		0	0		1		1

ENCODED INSTRUCTION:	011	0 < 0 = 0		1	1		0		0
READABLE INSTRUCTION:	LESS	0 < 0 = 0		1	1		0		0

ENCODED INSTRUCTION:	011	0 < 1 = 1		1	0		1		1
READABLE INSTRUCTION:	LESS	0 < 1 = 1		1	0		1		1

--------------------------------

--------------------------------
ALU every operation test

FORMAT:		OPCODE  A ? B = RESULT

ENCODED:	000  00000100 & 00000100 = 00000100
ASSEMBLY:	AND  4 & 4 = 4

ENCODED:	000  00000100 & 00000101 = 00000100
ASSEMBLY:	AND  4 & 5 = 4

ENCODED:	000  00000101 & 00000100 = 00000100
ASSEMBLY:	AND  5 & 4 = 4

ENCODED:	000  01111111 & 00010101 = 00010101
ASSEMBLY:	AND  127 & 21 = 21

ENCODED:	000  10000000 & 00010101 = 00000000
ASSEMBLY:	AND  -128 & 21 = 0

ENCODED:	000  00000000 & 00000000 = 00000000
ASSEMBLY:	AND  0 & 0 = 0

ENCODED:	000  11111111 & 01000101 = 01000101
ASSEMBLY:	AND  -1 & 69 = 69

ENCODED:	011  11111111 < 01000101 = 00000001
ASSEMBLY:	LESS  -1 < 69 = 1
		      -1 - 69 < 0
		        = -70 (true)

ENCODED:	011  11111111 < 11111111 = 00000000
ASSEMBLY:	LESS  -1 < -1 = 0
		      -1 - (-1) < 0
		        = 0 (false)

ENCODED:	011  11111111 < 10000000 = 00000000
ASSEMBLY:	LESS  -1 < -128 = 0
		      -1 - (-128) < 0
		        = 127 (false)

ENCODED:	011  00000000 < 00000000 = 00000000
ASSEMBLY:	LESS  0 < 0 = 0
		      0 - 0 < 0
		        = 0 (false)

ENCODED:	011  00000111 < 00000101 = 00000000
ASSEMBLY:	LESS  7 < 5 = 0
		      7 - 5 < 0
		        = 2 (false)

ENCODED:	011  01000101 < 01111111 = 00000001
ASSEMBLY:	LESS  69 < 127 = 1
		      69 - 127 < 0
		        = -58 (true)

ENCODED:	011  10110000 < 01010000 = 00000000
ASSEMBLY:	LESS  -80 < 80 = 0
		      -80 - 80 < 0
		        = -160 (true)

ENCODED:	011  10111111 < 01000000 = 00000000
ASSEMBLY:	LESS  -65 < 64 = 0
		      -65 - 64 < 0
		        = -129 (true)

ENCODED:	011  11000000 < 01000000 = 00000001
ASSEMBLY:	LESS  -64 < 64 = 1
		      -64 - 64 < 0
		        = -128 (true)

ENCODED:	011  10000000 < 01111111 = 00000000
ASSEMBLY:	LESS  -128 < 127 = 0
		      -128 - 127 < 0
		        = -255 (true)

ENCODED:	011  00000001 < 10000000 = 00000001
ASSEMBLY:	LESS  1 < -128 = 1
		      1 - (-128) < 0
		        = 129 (false)

ENCODED:	011  01111111111111111111111111111111 < 00000000000000000000000000000001 = 00000000000000000000000000000000
ASSEMBLY:	LESS  2147483647 < 1 = 0
		      2147483647 - 1 < 0
		        = 2147483646 (false)

ENCODED:	011  10000000000000000000000000000000 < 10000000000000000000000000000001 = 00000000000000000000000000000001
ASSEMBLY:	LESS  -2147483648 < -2147483647 = 1
		      -2147483648 - (-2147483647) < 0
		        = -1 (true)

ENCODED:	011  10000000000000000000000000000000 < 01111111111111111111111111111110 = 00000000000000000000000000000000
ASSEMBLY:	LESS  -2147483648 < 2147483646 = 0
		      -2147483648 - 2147483646 < 0
		        = -4294967294 (true)

ENCODED:	011  10000000000000000000000000000000 < 01111111111111111111111111111110 = 00000000000000000000000000000001
ASSEMBLY:	LESS  -2147483648 < 2147483646 = 1
		      -2147483648 - 2147483646 < 0
		        = -4294967294 (true)

ENCODED:	010  01111111111111111111111111111111 + 10000000000000000000000000000000 = 11111111111111111111111111111111
ASSEMBLY:	ADD  2147483647 + -2147483648 = -2

ENCODED:	010  01111111111111111111111111111111 + 01111111111111111111111111111111 = 11111111111111111111111111111110
ASSEMBLY:	ADD  2147483647 + 2147483647 = -3

ENCODED:	010  00000000 + 00000000 = 00000000
ASSEMBLY:	ADD  0 + 0 = 0

ENCODED:	010  00000000 + 11111111 = 11111111
ASSEMBLY:	ADD  0 + -1 = -1

ENCODED:	010  00000101 + 11111011 = 00000000
ASSEMBLY:	ADD  5 + -5 = 0

ENCODED:	010  00000101 + 11111011 = 00000000
ASSEMBLY:	ADD  5 + -5 = 0

ENCODED:	010  00000000 + 11111111 = 11111111
ASSEMBLY:	ADD  0 + -1 = -1

ENCODED:	001  11111111 | 01011000 = 11111111
ASSEMBLY:	OR  -1 | 88 = -1

ENCODED:	001  01111111 | 10000000 = 11111111
ASSEMBLY:	OR  127 | -128 = -1

ENCODED:	001  1101000011010000 | 0000000001000101 = 1101000011010101
ASSEMBLY:	OR  53456 | 69 = -12075

ENCODED:	001  00000000000000000000000000000000 | 00000000000000000000000000000000 = 00000000000000000000000000000000
ASSEMBLY:	OR  0 | 0 = 0

ENCODED:	001  0000000000000000 | 1111111111111111 = 1111111111111111
ASSEMBLY:	OR  0 | -1 = -1

ENCODED:	100  01 ^ 01 = 00
ASSEMBLY:	XOR  1 ^ 1 = 0

ENCODED:	100  0011 ^ 0010 = 0001
ASSEMBLY:	XOR  3 ^ 2 = 1

ENCODED:	100  11111111 ^ 01111111 = 10000000
ASSEMBLY:	XOR  -1 ^ 127 = -128

ENCODED:	100  10101000 ^ 01111111 = 11010111
ASSEMBLY:	XOR  -88 ^ 127 = -41

ENCODED:	100  01111111 ^ 11111111 = 10000000
ASSEMBLY:	XOR  127 ^ -1 = -128

--------------------------------
